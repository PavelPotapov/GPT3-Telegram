import random
import telebot
from telebot import types
from telebot import util #—Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
import requests
import json
from dotenv import load_dotenv
from data import *
import os
from datetime import date
import jsonpickle
from text import *
from stickers.sticker import *
from open_ai_mod.turbo3_5 import *
from open_ai_mod.davinci import *
from open_ai_mod.aduio_translate import *
from pydub import AudioSegment #–¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ ogg –≤ mp3



load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
VAL_PRICE_URL_ = os.getenv('VAL_PRICE_URL_')
CHANNEL_ID = os.getenv('CHANNEL_ID')

#–±–¥

botUsers = BotUsers('my_database.db')

#—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user(user_id, message, referrer_candidate, message_history_context=[], refer=0) -> bool:
    try:
        #—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        if not os.path.exists('users'):
            os.mkdir("users")
        filename = str(user_id) + '.json'
        json_object = json.loads(jsonpickle.encode(message))
        with open("users/" + filename, 'w') as f:
            json.dump(json_object, f)
        data_file = read_file("users/" + filename) #—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–¥

        if len(message_history_context) == 0: #–ø—É—Å—Ç–æ–π –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_history_context_file = read_file('first_context.json')
        botUsers.add_user(str(user_id), message.from_user.username, refer, message_history_context_file, False, 1000, str(referrer_candidate), str(date.today()), data_file)
        return True
    except Exception as e:
        error_log('error.txt', e, id)
        return False

#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è json —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —é–∑–µ—Ä–∞
def create_user_context_file(user_id: str, dictionary: dict) -> bool:
    if not os.path.exists('users_context'):
        os.mkdir("users_context")
    with open(f'users_context/{user_id}.json', 'w') as f:
        json.dump(dictionary, f)
        return True
    return False

#–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ª–æ–≤–∏ –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏)
def not_in_sub_channel(user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è (-–∞—Å—å)!", callback_data="check_sub")
    keyboard.add(callback_button)
    bot.send_message(user_id, warning_message, reply_markup=keyboard)

#–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def clear_context_message(user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–û—Ç—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")
    keyboard.add(callback_button)
    bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", reply_markup=keyboard)

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
def check_sub(user_id:str) -> bool:
    try:
        data = bot.get_chat_member(CHANNEL_ID, str(user_id))
        
        if str(data.status) != 'left':
            return True
        else:
            return False
    except:
        return False

#–∫–µ–π–±–æ–∞—Ä–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"
def say_hello_neuro(user_id) -> None:
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ üëã", callback_data="call_neuro")
    keyboard.add(callback_button)
    bot.send_message(user_id, hello_message, reply_markup=keyboard, parse_mode="HTML") 

#–∑–∞–ø–∏—Å—å –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª
def error_log(filename, e, id=None):
    with open(filename, 'a') as f:
        f.read(str(date.today()) + '/' + str(id) + '/' + str(e) + '\n')

#—Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def clear_context(user_id:str) -> bool:
    try:
        message_history_context_file = read_file('first_context.json')
        botUsers.update_user_by_id(user_id, message_history_context=message_history_context_file)
        return True
    except Exception as e:
        return False
    
#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥ (—Ç—É—Ç —è –¥–µ–ª–∞—é –ø–∞—Ä—Å–∏–Ω–≥ json –∏ –±–µ—Ä—É –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥)
def create_context_user(data:list, message:str, role='user') -> dict:
    #–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dict = json.loads(data[0][3])
    new_data = {
        'role': role,
        'content': message
    }
    dict['context'].append(new_data)
    return dict

#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥ (—Ç—É—Ç —è –¥–µ–ª–∞—é –ø–∞—Ä—Å–∏–Ω–≥ json –∏ –±–µ—Ä—É –∏–º–µ–Ω–Ω–æ 0 –∏ 3 —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥)
def create_context_assistant(data:list, message:str, role='assistant') -> dict:
    #–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dict = data
    new_data = {
        'role': role,
        'content': message
    }
    dict['context'].append(new_data)
    return dict

#–ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ 
def get_context_from(data:dict) -> list:
    if isinstance(data, dict):
        return data['context']
    else:
        return []

#—Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def create_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('‚öõÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    button2 = types.KeyboardButton('üö∏ –ü—Ä–æ—Ñ–∏–ª—å')
    button3 = types.KeyboardButton('‚ÜóÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å')
    button4 = types.KeyboardButton('üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞')
    button5 = types.KeyboardButton('üß† –ù–µ–π—Ä–æ–Ω–∫–∏ –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏')
    button6 = types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å')
    markup.add(button1, button2, button6)
    markup.add(button3, button4)
    markup.add(button5)
    return markup
global_markup = create_markup()

#—Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ—Å—Ç–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —ç—Ç–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –ª–∏–±–æ –æ—à–∏–±–∫—É, –ª–∏–±–æ –æ—Ç–≤–µ—Ç. –ê–Ω—Ç–∏-—Å–ø–∞–º
"""
global_state_message = {
    'user_id':{
        'mode': 'turbo', #mode davinci
        'type_request1':{
            "message":True
        }, 
        'type_request2':{
            "message": True
        }

    }
}
   
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id #int
    print('–ó–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', user_id, type(user_id))
    if not botUsers.get_user_by_id(str(user_id)):
        referrer = None #—Ä–µ—Ñ–µ—Ä
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Å—ã–ª–∫–∏ (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±–µ–ª)
        if " " in message.text:
            referrer_candidate = message.text.split()[1] #id –∫—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–≤–µ–ª —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            try:
                referrer_candidate = int(referrer_candidate)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG ID —Ä–µ—Ñ–µ—Ä–∞
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if user_id != referrer_candidate and botUsers.get_user_by_id(str(referrer_candidate)) and check_sub(str(referrer_candidate)):
                    try:
                        create_user(user_id, message, referrer_candidate) 
                        try:
                            refer_data = botUsers.get_user_by_id(str(referrer_candidate))
                            refer_data_refer = refer_data[0][2] + 1 #–∫–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —á–µ–ª–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 1
                            refer_data_tokens = refer_data[0][5] + 50 #—Ä–µ—Ñ–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è 50 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–µ–ª–∞
                            botUsers.update_user_by_id(str(referrer_candidate), refer=refer_data_refer, token=refer_data_tokens) #–æ–±–Ω–æ–≤–ª—è–µ–º —É —Ä–µ—Ñ–∞ –¥–≤–∞ –ø–æ–ª—è, –∫–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ —Ç–æ–∫–µ–Ω—ã
                        except:
                            error_log('error.txt', e, id=user_id)
                        if not check_sub(str(user_id)): #
                            not_in_sub_channel(user_id)#–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫ –∫–∞–Ω–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
                        else:
                            say_hello_neuro(user_id) 
                    except Exception as e:
                        create_user(user_id, message, referrer_candidate='') 
                        not_in_sub_channel(user_id)
                else:
                    create_user(user_id, message, referrer_candidate='') 
                    if not check_sub(str(user_id)):
                        not_in_sub_channel(user_id)
                    else:
                        say_hello_neuro(user_id) 
            except Exception as e:
                print('–°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è')
                error_log('error.txt', e, id=user_id)
                create_user(user_id, message, referrer_candidate='')
                if not check_sub(str(user_id)):
                    not_in_sub_channel(user_id)
                else:
                    say_hello_neuro(user_id) 
        else:
            create_user(user_id, message, referrer_candidate='') 
            if not check_sub(str(user_id)):
                not_in_sub_channel(user_id)
            else:
                say_hello_neuro(user_id)   
    else: #–µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–¥
        if check_sub(str(user_id)):
            say_hello_neuro(user_id) 
        else:
            not_in_sub_channel(user_id)

#callbacks
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "check_sub":
            if check_sub(str(call.message.chat.id)):
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="<b>üöÄüöÄüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>", parse_mode="HTML")
                    keyboard = types.InlineKeyboardMarkup()
                    callback_button = types.InlineKeyboardButton(text="–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ üëã", callback_data="call_neiro")
                    keyboard.add(callback_button)
                    bot.send_message(call.message.chat.id, hello_message, reply_markup=keyboard, parse_mode="HTML")
                except Exception as e:
                    with open('error.txt', 'a') as f:
                        f.write(str(date.today()) + '/' + str(call.message.chat.id) + '/' + str(e) + '\n')
            else:
                try:
                    bot.send_message(call.message.chat.id, "<b>‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ</b>", parse_mode="HTML")
                    not_in_sub_channel(str(call.message.chat.id))
                except Exception as e:
                    with open('error.txt', 'a') as f:
                        f.write(str(date.today()) + '/' + str(call.message.chat.id) + '/' + str(e) + '\n')
        if call.data == "call_neuro":
                try:
                    data = hello_neuro_message
                    data = "–û—Ç–≤–µ—Ç –æ—Ç üßø –êI üëá\n" + data
                    #bot.send_message(call.message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç üßø –êI üëá",  reply_markup=global_markup)
                    message = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=data)
                except Exception as e:
                    with open('error.txt', 'a') as f:
                        f.write(str(date.today()) + '/' + str(call.message.chat.id) + '/' + str(e) + '\n')
        if call.data == "clear":
            if clear_context(str(call.message.chat.id)):
                bot.send_message(call.message.chat.id, "üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞, –º–æ–∂–µ—à—å –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ç—å—é")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –æ—á–∏—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üëáüèª")
    
#–†–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@bot.message_handler(commands=["rassylka"])
def message(message):
    user_id = message.from_user.id
    if str(user_id) == "711246255": 
        """
            –ü–æ–∑–∏—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–¥–µ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
            1 - —Ä–µ–∫–ª–∞–º–∞ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π
            2 - —Ä–µ–∫–ª–∞–º–∞ —Å —Ñ–æ—Ç–æ –±–µ–∑ –∫–Ω–æ–ø–∫–æ–π
            3 - —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π
            4 - –†–µ–∫–ª–∞–º–∞ –±–µ–∑ —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏
            5 - –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π
            6 - –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            7 - –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π
            8 - –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Ñ–æ—Ç–æ –∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏

            9 - —Ä–µ–∫–ª–∞–º–∞ —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π
            10 - —Ä–µ–∫–ª–∞–º–∞ —Å –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            11 - –Ω–æ–≤–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–∞
            12 - –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –≤–∏–¥–µ–æ –∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏

            –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∑–∞–ø—Ä–æ—Å: /rassylka ?code=4&url=google.com&btn=–ü–µ—Ä–µ–π—Ç–∏
        """
        pos = message.text.find("?") 
        request = message.text[pos+1: ] #–ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req_data = request.split("&")
        dict_req = {}
        for req in req_data:
            a = req.split('=')
            dict_req[a[0]]=a[1]
        
        #–≥–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã
        extensions_allowed = ['.png', '.jpg']
        pictures_adverts = os.listdir('./mailing/advertisement') 
        files_adverts = []
        #–≥–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        pictures_news = os.listdir('./mailing/news') 
        files_news= []
        for extension in extensions_allowed:
            for picture in pictures_adverts:
                if picture.endswith(extension):
                    files_adverts.append(picture)
            for news in pictures_news:
                if news.endswith(extension):
                    files_news.append(news)

        all_users_tuple = botUsers.get_all_users("telegram_id")
        all_users_list = []
        for data in all_users_tuple:
            all_users_list.append(int(data[0]))

        #–µ—Å–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã url 
        if 'url' in dict_req:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"{dict_req['btn']} ‚Üó", url=f"{dict_req['url']}")
            keyboard.add(callback_button)
        if dict_req['code'] == '1':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                if len(files_adverts) > 0:
                    photo = open(f'./mailing/advertisement/{files_adverts[0]}', 'rb')
                    for user_id in all_users_list:
                        bot.send_photo(user_id, photo, caption=text, parse_mode="HTML", reply_markup=keyboard)
                else:
                    for user_id in all_users_list:
                        bot.send_message(user_id, text, parse_mode="HTML", reply_markup=keyboard)
        elif dict_req['code'] == '2':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                if len(files_adverts) > 0:
                    photo = open(f'./mailing/advertisement/{files_adverts[0]}', 'rb')
                    for user_id in all_users_list:
                        bot.send_photo(user_id, photo, caption=text, parse_mode="HTML")
                else:
                    for user_id in all_users_list:
                        bot.send_message(user_id, text, parse_mode="HTML")
        elif dict_req['code'] == '3':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                for user_id in all_users_list:
                    bot.send_message(user_id, text, parse_mode="HTML", reply_markup=keyboard)
        elif dict_req['code'] == '4':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                for user_id in all_users_list:
                    bot.send_message(user_id, text, parse_mode="HTML")
        if dict_req['code'] == '5':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                if len(files_news) > 0:
                    photo = open(f'./mailing/news/{files_news[0]}', 'rb')
                    for user_id in all_users_list:
                        bot.send_photo(user_id, photo, caption=text, parse_mode="HTML", reply_markup=keyboard)
                else:
                    for user_id in all_users_list:
                        bot.send_message(user_id, text, parse_mode="HTML", reply_markup=keyboard)
        elif dict_req['code'] == '6':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                if len(files_news) > 0:
                    photo = open(f'./mailing/news/{files_news[0]}', 'rb')
                    for user_id in all_users_list:
                        bot.send_photo(user_id, photo, caption=text, parse_mode="HTML")
                else:   
                    for user_id in all_users_list:
                        bot.send_message(user_id, text, parse_mode="HTML")
        elif dict_req['code'] == '7':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                for user_id in all_users_list:
                    bot.send_message(user_id, text, parse_mode="HTML", reply_markup=keyboard)
        elif dict_req['code'] == '8':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                for user_id in all_users_list:
                    bot.send_message(user_id, text, parse_mode="HTML")
        elif dict_req['code'] == '9':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                bot.send_video(user_id, open('./mailing/advertisement/videos/1.mp4', 'rb'), caption=text, parse_mode="HTML", reply_markup=keyboard)
        elif dict_req['code'] == '10':
            with open("./mailing/advertisement/advertisement.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                bot.send_video(user_id, open('./mailing/advertisement/videos/1.mp4', 'rb'), caption=text, parse_mode="HTML")
        elif dict_req['code'] == '11':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                bot.send_video(user_id, open('./mailing/news/videos/1.mp4', 'rb'), caption=text, parse_mode="HTML")
        elif dict_req['code'] == '12':
            with open("./mailing/news/news.txt", 'r', encoding='utf-8') as file:
                text = file.read()
                bot.send_video(user_id, open('./mailing/news/videos/1.mp4', 'rb'), caption=text, parse_mode="HTML")
        else:
            pass

def create_message_from_sound(message):
    user_id = message.from_user.id
    file_info = bot.get_file(message.voice.file_id)
    file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TELEGRAM_TOKEN, file_info.file_path))
    with open(f'./sounds/{user_id}.ogg','wb') as f:
        f.write(file.content)
    try:
        s = AudioSegment.from_ogg(f'./sounds/{user_id}.ogg')
        s.export(f'sounds/{user_id}.mp3', format="mp3")
        res = create_text_from_audio(f'./sounds/{user_id}.mp3')
        return res
    except:
        bot.send_message(user_id,"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
    try:
        os.remove(f'./sounds/{user_id}.ogg')
        os.remove(f'./sounds/{user_id}.mp3')
    except:
        pass

@bot.message_handler(content_types=['text', 'voice'])
def get_text_message(message):
    user_id = message.from_user.id #int
    if not check_sub(str(user_id)):
        not_in_sub_channel(user_id)
    else:
        if message.text == '/photo':
            print("!")
            file = open("videos/1.mp4", 'rb')
            bot.send_video(message.chat.id, file)
        elif message.text == '/invite' or message.text == "‚ÜóÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å":
            try:
                result_text = f"üöÄ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã —Ç–æ–∫–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ \n <code>https://t.me/Proba778_bot?start={message.from_user.id}</code>" + " \n"
                bot.send_message(message.from_user.id, result_text, parse_mode="HTML", reply_markup=global_markup)
            except Exception as e:
                with open('error.txt', 'a') as f:
                    f.write(str(date.today()) + '/' + str(user_id) + '/' + str(e) + '\n')
        elif message.text == '/info' or message.text == "‚öõÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            try:
                result_text = hello_message
                bot.send_message(message.from_user.id, result_text, parse_mode="HTML", reply_markup=global_markup)
            except Exception as e:
                with open('error.txt', 'a') as f:
                    f.write(str(date.today()) + '/' + str(user_id) + '/' + str(e) + '\n')
        elif message.text == '/profile' or message.text == "üö∏ –ü—Ä–æ—Ñ–∏–ª—å":
            try:
                user_data = botUsers.get_user_by_id(str(user_id))
                result_text = f"<b>üö∏–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data[0][1]}</b>\n\n"
                result_text += f"‚ñ™Ô∏è –í–∞—à telegram-ID: <code>{user_data[0][0]}</code> \n\n"
                result_text += f'‚ñ™Ô∏è –ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_data[0][2]}</b>\n\n'
                #result_text += f"‚ñ™Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –≤—ã premium –∞–∫–∫–∞—É–Ω—Ç: {'<b>–ü–æ–∫–∞ –Ω–µ—Ç</b>' if user_data[0][2] == 0 else '<b>–£–∂–µ –¥–∞üëë</b>'} \n\n"
                result_text += f"‚ñ™Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É - <b>{user_data[0][5]}</b> \n\n"
                if user_data[0][6] != '':
                    result_text += f"‚ñ™Ô∏è –í–∞—Å –ø—Ä–∏–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID - <b>{user_data[0][6]}</b>\n\n"
                result_text += f"‚ñ™Ô∏è –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: <b>{user_data[0][8]}</b>\n\n"
                result_text += f"‚ñ™Ô∏è –ö–æ–ª-–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∞–º–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è <b>{user_data[0][7]}</b> "
            except Exception as e:
                result_text = '‚ñ™Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ üôÜ‚Äç‚ôÇÔ∏è'
            try:
                bot.send_message(message.from_user.id, result_text, parse_mode="HTML", reply_markup=global_markup)
            except Exception as e:
                with open('error.txt', 'a') as f:
                    f.write(str(date.today()) + '/' + str(user_id) + '/' + str(e) + '\n')
        elif message.text == '/premium' or message.text == "üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞":
            try:
                result_text = '‚ñ™Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–∏—à–∏ @Pavel_Potapov'
                bot.send_message(message.from_user.id, result_text, parse_mode="HTML", reply_markup=global_markup)
            except Exception as e:
                with open('error.txt', 'a') as f:
                    f.write(str(date.today()) + '/' + str(user_id) + '/' + str(e) + '\n')
        elif message.text == '/neuro' or message.text == "üß† –ù–µ–π—Ä–æ–Ω–∫–∏ –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏":
            try:
                result_text = '‚ñ™Ô∏è <a href="https://progrramingforchild.notion.site/6f8a89c6a8cd44a4857a5ca5e4172b69">–ó–¥–µ—Å—å</a> –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø–æ–ª—å–∑—É–π—Å—è, –∏–∑—É—á–∞–π üòâ'
                bot.send_message(message.from_user.id, result_text, parse_mode="HTML", reply_markup=global_markup)
            except Exception as e:
                with open('error.txt', 'a') as f:
                    f.write(str(date.today()) + '/' + str(user_id) + '/' + str(e) + '\n')
        elif message.text == '–°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å':
            if clear_context(str(user_id)):
                bot.send_message(user_id, "üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞, –º–æ–∂–µ—à—å –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ç—å—é üëáüèª")
            else:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞ –æ—á–∏—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")
        else:
            result_text = ''
            if message.content_type == 'voice':
                try:
                    message.text = create_message_from_sound(message)
                    bot.send_message(user_id, f"–í–∞—â –∑–∞–ø—Ä–æ—Å:\n{message.text}")
                except:
                    message.text = ""
            #–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ 
            if len(message.text) > 0:
                try:
                    data = botUsers.get_user_by_id(str(user_id)) #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    context_user_data = create_context_user(data, message.text, role='user') #—Å–æ–∑–¥–∞—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –∑–∞–ø—Ä–æ—Å –≤ –±—É–¥—É—â–µ–º
                    tokens = data[0][5] #–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —é–∑–µ—Ä–∞
                    requests = data[0][7] #—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    if tokens > 0:
                        tokens -= 1
                        requests += 1
                        try:
                            botUsers.update_user_by_id(str(user_id), token=tokens, request=requests) #–æ–±–Ω–æ–≤–ª—è—é –∏–∑–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –∏ —Ç–æ–∫–µ–Ω–∞–º
                        except Exception as e:
                            bot.send_message(message.from_user.id, "‚ñ™Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ üôÜ‚Äç‚ôÇÔ∏è")  

                        #–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É
                        if not str(user_id) in global_state_message:
                            global_state_message[str(user_id)] = {}
                        if not "turbo3_5" in global_state_message[str(user_id)]:
                            global_state_message[str(user_id)]['turbo3_5'] = False
                        if not "davinci" in global_state_message[str(user_id)]:
                            global_state_message[str(user_id)]['davinci'] = False
                    
                        #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ç–∏
                        if str(user_id) in global_state_message and global_state_message[str(user_id)]['turbo3_5'] == False:
                            global_state_message[str(user_id)]['turbo3_5'] = True #—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç—É—Ä–±–æ3.5 –≤–µ—Ä—Å–∏–∏
                            message1 = bot.send_message(message.from_user.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –º–æ–∂–µ—Ç –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ <b>3 –º–∏–Ω—É—Ç</b> ‚è±Ô∏è", parse_mode="HTML")

                            #–¥–µ–ª–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
                            random_sticker_number = random.randint(0, len(stickers_id))
                            sticker_hash = ''
                            for val in stickers_id[random_sticker_number].values():
                                sticker_hash = val
                            message2 = bot.send_sticker(message.from_user.id, sticker_hash)
                            #–û–°–ù–û–í–ù–û–ô –ó–ê–ü–†–û–° –ö –ù–ï–ô–†–û–°–ï–¢–ò
                            
                            #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                            context_user_data_list = get_context_from(context_user_data)
                            result_text = chatgpt_response_turbo35(message.text, context_user_data_list)
                            #–ø–µ—Ä–µ–ø–æ–ª–Ω–∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            if result_text == 1:
                                clear_context_message(message.chat.id)
                                global_state_message[str(user_id)]['turbo3_5'] = False 
                            #–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                            elif result_text == 2:
                                global_state_message[str(user_id)]['davinci'] = True #—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –¥–∞–≤–∏–Ω—á–∏ –≤–µ—Ä—Å–∏–∏
                                bot.send_message(message.from_user.id, '–ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞. –ü–µ—Ä–µ–≤–æ–∂—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–∏–π —á–∞—Ç')
                                bot.delete_message(message.chat.id, message1.message_id)
                                bot.delete_message(message.chat.id, message2.message_id)
                                result_text = (message.text, context_user_data_list)
                                result_text = chatgpt_response_davinci(message.text)
                                if result_text == 1:
                                    bot.send_message(message.from_user.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞—Ä–æ—Å, –º–Ω–æ–≥–æ –±—É–∫–≤!')
                                    global_state_message[str(user_id)]['davinci'] = False
                                elif result_text == 2:
                                    bot.send_message(message.from_user.id, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ!')
                                    global_state_message[str(user_id)]['davinci'] = False
                                else:
                                    try:
                                        bot.edit_message_text('–û—Ç–≤–µ—Ç –æ—Ç üßø –êI üëá', message.chat.id, message1.message_id)
                                        bot.delete_message(message.chat.id, message2.message_id)
                                    except:
                                        pass
                                    for msg in util.split_string(result_text, 3000): #—Ä–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ 3–∫ —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –æ –¥–ª–∏–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                                        bot.send_message(message.from_user.id, msg)
                                    global_state_message[str(user_id)]['davinci'] = False
                            else:
                                new_context_user_data_dict = create_context_assistant(context_user_data, result_text, role='assistant') 
                                if create_user_context_file(str(user_id), new_context_user_data_dict): #—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —é–∑–µ—Ä–∞
                                    try:
                                        data_file = read_file(f"users_context/{user_id}.json") #—Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                                        botUsers.update_user_by_id(user_id=str(user_id), message_history_context=data_file) #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫ –≤ –±–¥
                                    except Exception as e:
                                        error_log('error.txt', e, user_id)
                                bot.edit_message_text('–û—Ç–≤–µ—Ç –æ—Ç üßø –êI üëá', message.chat.id, message1.message_id)
                                bot.delete_message(message.chat.id, message2.message_id)
                                for msg in util.split_string(result_text, 3000): #—Ä–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ 3–∫ —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –æ –¥–ª–∏–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                                    bot.send_message(message.from_user.id, msg)
                                global_state_message[str(user_id)]['davinci'] = False
                                global_state_message[str(user_id)]['turbo3_5'] = False
                    else: #–Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                        bot.send_message(message.from_user.id, "‚ñ™Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã üôÜ‚Äç‚ôÇÔ∏è X–æ—á–µ—à—å <b>–µ—â—ë</b>? –¢–æ–≥–¥–∞ <b>–ø–∏—à–∏</b> @Pavel_Potapov", parse_mode="HTML", reply_markup=global_markup)
                        global_state_message[str(user_id)]['davinci'] = False
                        global_state_message[str(user_id)]['turbo3_5'] = False
                except Exception as e:
                    result_text = '‚ñ™Ô∏è –°–µ–π—á–∞—Å –Ω–∞–±–ª—é–¥–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ AI. –û—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ üôÜ‚Äç‚ôÇÔ∏è'
                    bot.send_message(message.from_user.id, result_text, reply_markup=global_markup)
                    global_state_message[str(user_id)]['davinci'] = False
                    global_state_message[str(user_id)]['turbo3_5'] = False

print('–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')
bot.polling(non_stop=True, interval=0)

